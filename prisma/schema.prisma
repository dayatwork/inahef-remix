// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EXHIBITOR
  VISITOR
}

model User {
  id               String     @id @default(uuid())
  ticketNumber     Int        @default(autoincrement())
  name             String
  email            String     @unique
  phone            String?    @unique
  role             Role       @default(VISITOR)
  avatar           String?
  googleProviderId String?
  password         Password?
  jobTitle         String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  exhibitor        Exhibitor? @relation(fields: [exhibitorId], references: [id])
  exhibitorId      String?
  isActive         Boolean    @default(true)
  readMessages     Message[]
  orders           Order[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Exhibitor {
  id              String    @id @default(uuid())
  name            String
  email           String?
  phone           String?
  logo            String?
  website         String?
  country         String?
  users           User[]
  registrationId  String?
  products        Product[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  exhibitorBooths Booth[]
}

model Message {
  id       String    @id @default(uuid())
  from     String
  subject  String
  content  String
  sentAt   DateTime  @default(now())
  readAt   DateTime?
  readBy   User      @relation(fields: [readById], references: [id])
  readById String
}

model Rundown {
  id          String   @id @default(uuid())
  startAt     DateTime
  endAt       DateTime
  title       String
  description String?
}

enum PartnerType {
  EVENT_PARTNER
  MEDIA_PARTNER
}

model Partner {
  id             String      @id @default(uuid())
  type           PartnerType
  name           String
  logo           String
  registrationId String?
}

model ProductCategory {
  id                                     String                                   @id @default(uuid())
  name                                   String                                   @unique
  color                                  String                                   @unique
  description                            String                                   @default("")
  booth                                  Booth[]
  exhibitorRegistrationProductCategories ExhibitorRegistrationProductCategories[]
}

model BoothSize {
  id                String    @id @default(uuid())
  length            Int       @db.SmallInt
  width             Int       @db.SmallInt
  defaultPriceInIDR Int
  booths            Booth[]
  packages          Package[]

  @@unique([length, width])
}

enum BoothStatus {
  AVAILABLE
  OCCUPIED
  BOOKED
}

model Booth {
  id                          String                       @id @default(uuid())
  boothNumber                 Int                          @unique
  productCategory             ProductCategory              @relation(fields: [productCategoryId], references: [id])
  productCategoryId           String
  size                        BoothSize                    @relation(fields: [sizeId], references: [id])
  sizeId                      String
  priceInIDR                  Int
  status                      BoothStatus                  @default(AVAILABLE)
  exhibitorRegistrationBooths ExhibitorRegistrationBooth[]
  exhibitor                   Exhibitor?                   @relation(fields: [exhibitorId], references: [id])
  exhibitorId                 String?
}

model Product {
  id           String         @id @default(uuid())
  exhibitor    Exhibitor      @relation(fields: [exhibitorId], references: [id])
  exhibitorId  String
  name         String
  code         String?
  externalLink String?
  priceInIDR   Int
  details      String?
  available    Boolean        @default(true)
  images       ProductImage[]
  orders       Order[]
}

model ProductImage {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  url       String
  label     String
  createdAt DateTime @default(now())
}

enum OrderStatus {
  TAKING_PLACE
  SUCCEED
  FAIL
}

model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  product   Product     @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  status    OrderStatus @default(TAKING_PLACE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum RegistrationStatus {
  WAITING_CONFIRMATION
  APPROVED
  REJECTED
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
}

model ExhibitorRegistration {
  id                          String                                   @id @default(uuid())
  picName                     String
  picEmail                    String
  picPhone                    String
  companyName                 String
  companyEmail                String
  companyPhone                String
  companyWebsite              String?
  country                     String
  registrationStatus          RegistrationStatus                       @default(WAITING_CONFIRMATION)
  productCategories           ExhibitorRegistrationProductCategories[]
  exhibitorRegistrationBooths ExhibitorRegistrationBooth[]
  exhibitorRegistrationItems  ExhibitorRegistrationItem[]
  totalPrice                  Int
  paymentStatus               PaymentStatus                            @default(UNPAID)
  registrationDate            DateTime                                 @default(now())
  paidAt                      DateTime?
  approvedAt                  DateTime?
}

model ExhibitorRegistrationProductCategories {
  exhibitorRegistration   ExhibitorRegistration @relation(fields: [exhibitorRegistrationId], references: [id])
  exhibitorRegistrationId String
  productCategory         ProductCategory       @relation(fields: [productCategoryId], references: [id])
  productCategoryId       String

  @@id([exhibitorRegistrationId, productCategoryId])
}

model RegistrationItem {
  id                         String                      @id @default(uuid())
  name                       String
  description                String                      @default("")
  unit                       String
  unitPrice                  Int
  exhibitorRegistrationItems ExhibitorRegistrationItem[]
  packageItems               PackageItem[]
}

model ExhibitorRegistrationItem {
  id                      String                @id @default(uuid())
  exhibitorRegistration   ExhibitorRegistration @relation(fields: [exhibitorRegistrationId], references: [id])
  exhibitorRegistrationId String
  registrationItem        RegistrationItem      @relation(fields: [registrationItemId], references: [id])
  registrationItemId      String
  quantity                Int                   @db.SmallInt
  totalPrice              Int

  @@unique([registrationItemId, exhibitorRegistrationId])
}

model ExhibitorRegistrationBooth {
  id                      String                @id @default(uuid())
  exhibitorRegistration   ExhibitorRegistration @relation(fields: [exhibitorRegistrationId], references: [id])
  exhibitorRegistrationId String
  booth                   Booth                 @relation(fields: [boothId], references: [id])
  boothId                 String
  price                   Int
}

model Package {
  id              String        @id @default(uuid())
  name            String        @unique
  boothSize       BoothSize     @relation(fields: [boothSizeId], references: [id])
  boothSizeId     String
  priceInIDR      Int
  promoPriceInIDR Int
  isPromo         Boolean       @default(false)
  packageItems    PackageItem[]
}

model PackageItem {
  id                 String           @id @default(uuid())
  package            Package          @relation(fields: [packageId], references: [id])
  packageId          String
  registrationItem   RegistrationItem @relation(fields: [registrationItemId], references: [id])
  registrationItemId String
  quantity           Int              @db.SmallInt
}
